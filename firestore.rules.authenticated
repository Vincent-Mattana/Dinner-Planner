rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User-specific meal collections after you implement authentication
    match /users/{userId}/meals/{mealId} {
      // Allow users to read/write only their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Function to validate meal structure
      function validMeal(meal) {
        return meal.size() <= 4 && // Limit fields to prevent abuse
               meal.keys().hasAll(['name', 'ingredients', 'recipe']) && // Required fields
               meal.name is string && meal.name.size() > 0 && meal.name.size() <= 100 && // Name validation
               meal.ingredients is list && // Ingredients must be a list
               meal.recipe is string && meal.recipe.size() <= 5000 && // Recipe validation
               (meal.keys().hasAny(['checked']) ? meal.checked is bool : true); // checked is optional but must be boolean
      }
    }
    
    // Shared meal collection that all authenticated users can access
    match /shared_meals/{mealId} {
      // Anyone authenticated can read
      allow read: if request.auth != null;
      
      // Only the creator can update or delete
      allow update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
      
      // Anyone authenticated can create, but must include their ID
      allow create: if request.auth != null && 
                     request.resource.data.createdBy == request.auth.uid &&
                     validMeal(request.resource.data);
      
      // Function to validate meal structure with creator field
      function validMeal(meal) {
        return meal.size() <= 5 && // Limit fields to prevent abuse
               meal.keys().hasAll(['name', 'ingredients', 'recipe', 'createdBy']) && // Required fields
               meal.name is string && meal.name.size() > 0 && meal.name.size() <= 100 && // Name validation
               meal.ingredients is list && // Ingredients must be a list
               meal.recipe is string && meal.recipe.size() <= 5000 && // Recipe validation
               meal.createdBy is string && // Creator ID
               (meal.keys().hasAny(['checked']) ? meal.checked is bool : true); // checked is optional but must be boolean
      }
    }
    
    // Deny access to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 